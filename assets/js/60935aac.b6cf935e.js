(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3328],{85162:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var o=n(67294),a=n(86010);const r="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return o.createElement("div",{role:"tabpanel",className:(0,a.default)(r,l),hidden:n},t)}},74866:(e,t,n)=>{"use strict";n.d(t,{Z:()=>C});var o=n(87462),a=n(67294),r=n(86010),l=n(12466),i=n(16550),s=n(91980),c=n(67392),u=n(50012);function d(e){return function(e){return a.Children.map(e,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:o,default:a}}=e;return{value:t,label:n,attributes:o,default:a}}))}function p(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const o=(0,i.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(r),(0,a.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(o.location.search);t.set(r,e),o.replace({...o.location,search:t.toString()})}),[r,o])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,r=p(e),[l,i]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const o=n.find((e=>e.default))??n[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:t,tabValues:r}))),[s,c]=h({queryString:n,groupId:o}),[d,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,r]=(0,u.Nk)(n);return[o,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:o}),v=(()=>{const e=s??d;return m({value:e,tabValues:r})?e:null})();(0,a.useLayoutEffect)((()=>{v&&i(v)}),[v]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),g(e)}),[c,g,r]),tabValues:r}}var v=n(72389);const f="tabList__CuJ",k="tabItem_LNqP";function w(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),p=e=>{const t=e.currentTarget,n=u.indexOf(t),o=c[n].value;o!==i&&(d(t),s(o))},m=e=>{var t;let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}null==(t=n)||t.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.default)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:l}=e;return a.createElement("li",(0,o.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:p},l,{className:(0,r.default)("tabs__item",k,null==l?void 0:l.className,{"tabs__item--active":i===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:o}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===o));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==o}))))}function y(e){const t=g(e);return a.createElement("div",{className:(0,r.default)("tabs-container",f)},a.createElement(w,(0,o.Z)({},e,t)),a.createElement(b,(0,o.Z)({},e,t)))}function C(e){const t=(0,v.Z)();return a.createElement(y,(0,o.Z)({key:String(t)},e))}},40322:(e,t,n)=>{"use strict";n.d(t,{Y:()=>l,e:()=>r});var o=n(54522),a=n(16999);const r=()=>({web3ProviderUri:"https://matic-mumbai.chainstacklabs.com",neverminedNodeUri:"https://node.mumbai.public.nevermined.network",verbose:2,neverminedNodeAddress:"0x5838B5512cF9f12FE9f2beccB20eb47211F9B0bc",graphHttpUri:"https://api.thegraph.com/subgraphs/name/nevermined-io/public",marketplaceAuthToken:o.AuthToken.fetchMarketplaceApiTokenFromLocalStorage().token,marketplaceUri:"https://marketplace-api.mumbai.public.nevermined.network",artifactsFolder:`${location.protocol}//${location.host}/contracts`}),l=[a.Dn.v8]},39021:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>g,default:()=>b,frontMatter:()=>h,metadata:()=>v,toc:()=>k});var o=n(87462),a=n(67294),r=n(3905),l=n(16999),i=n(76798);var s=n(40322);const c=(0,i.CY)("providers",{providers__content:"providers__content_Q5Ec","providers__content--connector":"providers__content--connector_vR3v"}),u=()=>{const{login:e,walletAddress:t,logout:n,getConnectors:o}=(0,l.Os)();return a.createElement("div",{className:c("content")},t?a.createElement(a.Fragment,null,a.createElement(i.II,{type:"p",variants:["detail"]},t),a.createElement(i.wg,{type:"secondary",onClick:n},"Logout")):o().map((t=>a.createElement(i.wg,{className:c("content",["connector"]),key:t.name,type:"secondary",onClick:()=>e(t)},"Connect to ",t.name))))},d=()=>{const e=l.xv.createClient(l.p$.getDefaultClient({appName:"Login",chains:s.Y,autoConnect:!0}));return a.createElement(l.nS,{client:e,correctNetworkId:80001,connectKitProps:{theme:"auto",mode:"dark"}},a.createElement(u,null))};var p=n(74866),m=n(85162);const h={sidebar_position:3,description:"It covers the providers integration, finishing with the login and logout with your Metamask wallet provider."},g="Login with Wallet Provider",v={unversionedId:"tutorials/login-wallet-provider",id:"tutorials/login-wallet-provider",title:"Login with Wallet Provider",description:"It covers the providers integration, finishing with the login and logout with your Metamask wallet provider.",source:"@site/docs/tutorials/login-wallet-provider.md",sourceDirName:"tutorials",slug:"/tutorials/login-wallet-provider",permalink:"/docs/tutorials/login-wallet-provider",draft:!1,editUrl:"https://github.com/nevermined-io/docs/tree/main/docs/tutorials/login-wallet-provider.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"It covers the providers integration, finishing with the login and logout with your Metamask wallet provider."},sidebar:"tutorialSidebar",previous:{title:"How to build a React application integrated with Nevermined",permalink:"/docs/tutorials/build-first-react"},next:{title:"How to create and consume your first assets in a React application integrated with Nevermined",permalink:"/docs/tutorials/assets"}},f={},k=[{value:"Requirements",id:"requirements",level:2},{value:"How to install Catalog Provider",id:"how-to-install-catalog-provider",level:2},{value:"Add the wallet provider",id:"add-the-wallet-provider",level:2},{value:"Add login component",id:"add-login-component",level:2},{value:"Config your network (optional)",id:"config-your-network-optional",level:2},{value:"Lets put everything together",id:"lets-put-everything-together",level:2},{value:"Demo",id:"demo",level:2}],w={toc:k};function b(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},w,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"login-with-wallet-provider"},"Login with Wallet Provider"),(0,r.kt)("p",null,"In this tutorial you will learn how you can integrate Wallet Provider from the Catalog in your dapp and implement operations like login and logout"),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("p",null,"For the tutorial you will need:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A extension of ",(0,r.kt)("a",{parentName:"li",href:"https://metamask.io/"},"Metamask")," installed in the browser"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://nodejs.org/en/"},"node")," and ",(0,r.kt)("a",{parentName:"li",href:"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"},"npm")," need to be installed")),(0,r.kt)("h2",{id:"how-to-install-catalog-provider"},"How to install Catalog Provider"),(0,r.kt)("p",null,"Firstable to install ",(0,r.kt)("a",{parentName:"p",href:"/docs/react-components/providers/"},"Catalog Provider")," you just need to run:"),(0,r.kt)(p.Z,{mdxType:"Tabs"},(0,r.kt)(m.Z,{label:"yarn",value:"yarn",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @nevermined-io/catalog-providers\n"))),(0,r.kt)(m.Z,{label:"npm",value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save @nevermined-io/providers\n")))),(0,r.kt)("h2",{id:"add-the-wallet-provider"},"Add the wallet provider"),(0,r.kt)("p",null,"Now in our app we need to add the Wallet Provider as a parent of all the components that will use functionalities from it. The ",(0,r.kt)("inlineCode",{parentName:"p"},"WalletProvider")," has a prop call ",(0,r.kt)("inlineCode",{parentName:"p"},"client")," where we need to pass the instance of the ",(0,r.kt)("a",{parentName:"p",href:"https://wagmi.sh/docs/client"},"Wagmi client"),", the good news is that we have ",(0,r.kt)("inlineCode",{parentName:"p"},"getClient")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"@nevermined-io/providers")," which will return a client already configured.\nOptionally we can pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"correctNetworkId")," which will request to the wallet to change to the set network when the current one is not supported, and ",(0,r.kt)("inlineCode",{parentName:"p"},"connectKitProps")," that includes all the customization option of ",(0,r.kt)("inlineCode",{parentName:"p"},"ConnectKit"),", see options ",(0,r.kt)("a",{parentName:"p",href:"https://docs.family.co/connectkit/customization"},"here")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Example from 'examples';\nimport { WalletProvider } from '@nevermined-io/providers';\n\nReactDOM.render(\n    <div>\n        <WalletProvider\n          client={getClient(ChainsConfig)}\n          correctNetworkId={80001}\n          connectKitProps={\n            {\n              theme: 'auto',\n              mode: 'dark',\n            }\n          }\n        >\n          <Login/>\n        </WalletProvider>\n    </div>,\n    document.getElementById(\"root\") as HTMLElement\n);\n")),(0,r.kt)("h2",{id:"add-login-component"},"Add login component"),(0,r.kt)("p",null,"Let's create a component that contains a login button for each provider, and other button to logout."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const Login = () => {\n  const { login, walletAddress, logout, getConnectors} = useWallet()\n\n  return (\n    <div className={b('content')}>\n      {!walletAddress ?\n        getConnectors().map(c => \n          <UiButton key={c.name} className={b('content', ['connector'])} type='secondary' onClick={() => login(c)}>Connect to {c.name}</UiButton>\n        )\n        : \n        <>\n          <UiText type='p' variants={[\"detail\"]}>{walletAddress}</UiText>\n          <UiButton type='secondary' onClick={logout}>Logout</UiButton>\n        </>\n      }\n    </div>\n  )\n}\n")),(0,r.kt)("p",null,"In this component we have the ",(0,r.kt)("inlineCode",{parentName:"p"},"login")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"logout")," functions and the ",(0,r.kt)("inlineCode",{parentName:"p"},"walletAddress")," state, if ",(0,r.kt)("inlineCode",{parentName:"p"},"walletAddress")," is not empty means that the wallet is connected and will show the address and logout button otherwise will show the button to connect.\nHow you can see, we also have ",(0,r.kt)("inlineCode",{parentName:"p"},"getConnectors")," which includes all the providers available to connect."),(0,r.kt)("h2",{id:"config-your-network-optional"},"Config your network (optional)"),(0,r.kt)("p",null,"At least that you need to set differents networks for your dapp than ",(0,r.kt)("a",{parentName:"p",href:"https://polygon.technology/"},"polygon")," chains config is not needed, anyway here we show you how should look the config object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const ChainsConfig: Chain[] = [\n  Wagmi.chain.polygon,\n  Wagmi.chain.polygonMumbai,\n  {\n    id: 1337,\n    name: "Localhost development",\n    network: "spree",\n    nativeCurrency: {\n      name: "Ethereum",\n      symbol: "ETH",\n      decimals: 18,\n    },\n    rpcUrls: {\n      default: "http://localhost:8545"\n    },\n    testnet: true\n  },\n]\n\nexport default ChainConfig;\n')),(0,r.kt)("h2",{id:"lets-put-everything-together"},"Lets put everything together"),(0,r.kt)("p",null,"In order to finish we need to call this component inside of the providers, this is the complete example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import React from 'react'\nimport { WalletProvider, getClient, useWallet, Wagmi } from '@nevermined-io/catalog-providers'\nimport { UiButton, UiText, BEM } from '@nevermined-io/styles'\nimport styles from './styles.module.scss'\n\nconst b = BEM('providers', styles)\n\nconst ChainsConfig: Chain[] = [\n  Wagmi.chain.polygon,\n  Wagmi.chain.polygonMumbai,\n  {\n    id: 1337,\n    name: \"Localhost development\",\n    network: \"spree\",\n    nativeCurrency: {\n      name: \"Ethereum\",\n      symbol: \"ETH\",\n      decimals: 18,\n    },\n    rpcUrls: {\n      default: \"http://localhost:8545\"\n    },\n    testnet: true\n  },\n]\n\nconst Login = () => {\n  const { login, walletAddress, logout, getConnectors} = useWallet()\n\n  return (\n    <div className={b('content')}>\n      {!walletAddress ?\n        getConnectors().map(c => \n          <UiButton key={c.name} className={b('content', ['connector'])} type='secondary' onClick={() => login(c)}>Connect to {c.name}</UiButton>\n        )\n        : \n        <>\n          <UiText type='p' variants={[\"detail\"]}>{walletAddress}</UiText>\n          <UiButton type='secondary' onClick={logout}>Logout</UiButton>\n        </>\n      }\n    </div>\n  )\n}\n\nReactDOM.render(\n    <div>\n        <WalletProvider\n          client={Wagmi.createClient(\n            ConnectKit.getDefaultClient({\n              appName: 'Login',\n              chains: ChainsConfig,\n              autoConnect: true\n            })\n          )}\n          correctNetworkId={80001}\n          connectKitProps={\n            {\n              theme: 'auto',\n              mode: 'dark',\n            }\n          }\n        >\n          <Login/>\n        </WalletProvider>\n    </div>,\n    document.getElementById(\"root\") as HTMLElement\n);\n")),(0,r.kt)("h2",{id:"demo"},"Demo"),(0,r.kt)(d,{mdxType:"ProvidersApp"}))}b.isMDXComponent=!0},33686:()=>{},39679:()=>{},80950:()=>{},77611:()=>{},88621:()=>{},46601:()=>{},89214:()=>{},96419:()=>{},56353:()=>{},8623:()=>{},7748:()=>{},27790:()=>{},85568:()=>{},95979:()=>{},69386:()=>{},31616:()=>{},29120:()=>{},46586:()=>{},56619:()=>{},77108:()=>{},82825:()=>{},69862:()=>{},40964:()=>{}}]);