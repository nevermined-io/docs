"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4791],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),u=i,m=p["".concat(l,".").concat(u)]||p[u]||h[u]||r;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},62548:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=n(87462),i=(n(67294),n(3905));const r={sidebar_position:11,description:"Identity management with on-chain access control"},o="Identity management with on-chain access control",s={unversionedId:"architecture/specs/Spec-IDM",id:"architecture/specs/Spec-IDM",title:"Identity management with on-chain access control",description:"Identity management with on-chain access control",source:"@site/docs/architecture/specs/Spec-IDM.md",sourceDirName:"architecture/specs",slug:"/architecture/specs/Spec-IDM",permalink:"/docs/architecture/specs/Spec-IDM",draft:!1,editUrl:"https://github.com/nevermined-io/docs/tree/main/docs/architecture/specs/Spec-IDM.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11,description:"Identity management with on-chain access control"},sidebar:"tutorialSidebar",previous:{title:"Marketplace API",permalink:"/docs/architecture/specs/Spec-MKT"},next:{title:"Nevermind Specs Examples",permalink:"/docs/architecture/specs/examples/"}},l={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Motivation",id:"motivation",level:3},{value:"Concepts",id:"concepts",level:2},{value:"Specifications",id:"specifications",level:3},{value:"Actors",id:"actors",level:3},{value:"Use Case",id:"use-case",level:2},{value:"Preconditions",id:"preconditions",level:3},{value:"Requirements",id:"requirements",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Identity Management",id:"identity-management",level:3},{value:"Verifiable Credentials associated with Nevermined assets",id:"verifiable-credentials-associated-with-nevermined-assets",level:4},{value:"Json Web Tokens (JWT)",id:"json-web-tokens-jwt",level:3},{value:"JWT Structure",id:"jwt-structure",level:4},{value:"JWT Payload",id:"jwt-payload",level:4},{value:"Identity Nodes",id:"identity-nodes",level:3},{value:"Interactions between the actors",id:"interactions-between-the-actors",level:3},{value:"Node JWT implementation",id:"node-jwt-implementation",level:3},{value:"JWT Authorization Grants",id:"jwt-authorization-grants",level:4},{value:"Adding and Revoking Permissions",id:"adding-and-revoking-permissions",level:3},{value:"Annex",id:"annex",level:2},{value:"Serializing DID Documents",id:"serializing-did-documents",level:3},{value:"Examples of JWT Grant Tokens",id:"examples-of-jwt-grant-tokens",level:3}],c={toc:d};function h(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"identity-management-with-on-chain-access-control"},"Identity management with on-chain access control"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"shortname:      IDM\nname:           Identity management with on-chain access control\ntype:           Draft\nstatus:         Valid\nversion:        0.1\neditor:         Aitor Argomaniz <aitor@nevermined.io>\ncontributors:\n")),(0,i.kt)("p",null,"This SPEC introduces a pattern for integrating independent Domain Controller\nsystem to manage the identity authorization with the Nevermined ",(0,i.kt)("strong",{parentName:"p"},"Service\nExecution Agreements (SEAs)"),' (also called "Service Agreements" or "Agreements")\nas contracts between parties interacting in a transaction.'),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Corporate environments utilize complex identity management and access control\nvia Domain Controllers (i.e Active Directory). These solutions allow to\nauthenticate and authorize corporate users of a specific domain or network.\nImplementations like Active Directory enable the management of individual or\ngroup permissions within the organization assigning security policies.\nAt the same time, decentralized ecosystems allow the interaction and\ncollaboration between different users part of the network using Decentralized\nLedger Technologies (DLT) as source of truth of the shared network.\nIn the data ecosystems where different organizations are members of the same\nnetwork or consortia, it\u2019s a challenge to handle how the identity is managed\nwithin the organization (centralized) and how these different organizations can\ninteract with each other re-using their existing Domain Controllers without\nmoving all the existing identity management rules to a new silo or environment\n(centralized or decentralized)."),(0,i.kt)("p",null,"The intention of this document is to detail how independent organizations can\nintegrate their existing corporate Domain Controllers in a Decentralized data\necosystem allowing the decentralized access control without replicating the\nexisting organization permissions to the decentralized network."),(0,i.kt)("h3",{id:"motivation"},"Motivation"),(0,i.kt)("p",null,"The main motivations of the solution described are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Understand how in a decentralized environment, different organizations with\ntotally independent (and probably incompatible) Domain controllers can manage\nthe permissions of the their decentralized assets (subjects) without\nreplicating the permission policies in a new solution"),(0,i.kt)("li",{parentName:"ul"},"Understand what are the different actors involved and how these actors\ninteract"),(0,i.kt)("li",{parentName:"ul"},"Identify the main interfaces required for the interactions"),(0,i.kt)("li",{parentName:"ul"},"Identify the credentials generation and management"),(0,i.kt)("li",{parentName:"ul"},"Understand how the credentials issued can map to a DLT user identity via keys"),(0,i.kt)("li",{parentName:"ul"},"Facilitate the interoperability between actors in the system")),(0,i.kt)("h2",{id:"concepts"},"Concepts"),(0,i.kt)("h3",{id:"specifications"},"Specifications"),(0,i.kt)("p",null,"Nevermined Identity Management solution is designed based on the\n",(0,i.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/vc-data-model/"},"Verifiable Credentials")," &\n",(0,i.kt)("a",{parentName:"p",href:"https://w3c.github.io/did-core/"},"Decentralized Identifiers")," specifications  as\nbuilding block in the design of the solution. So some of the terms and concepts\nused are based on these specifications."),(0,i.kt)("h3",{id:"actors"},"Actors"),(0,i.kt)("p",null,"The actors identified in the solution described are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Holder")," - An actor possessing one or more credentials. This user presents\nthese credentials for identification purposes"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Issuer")," - The actors asserting the claims about different organization\nsubjects and creating the credentials for that claims and transmitting to the\nHolder"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Verifier")," - The actors receiving credential presentations from Holders for\nfurther verification"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Verifiable data registry")," - The actors associated with the organizations\nmanaging the internal user and groups permissions")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"W3C Actors in Verifiable Credentials",src:n(49245).Z,width:"960",height:"540"})),(0,i.kt)("h2",{id:"use-case"},"Use Case"),(0,i.kt)("h3",{id:"preconditions"},"Preconditions"),(0,i.kt)("p",null,"The specification and architecture designed is based in some environment\npreconditions. These preconditions need to be taken into account in order to\nadapt the solution designed to the environment where this solution is going to\nbe used. The main environment characteristics are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Multiple and independent organizations participate in a decentralized data\necosystem"),(0,i.kt)("li",{parentName:"ul"},"Each organization have independent Identity Services (like Active Directory)\nto manage the internal authentication and authorization of their users and\ngroups"),(0,i.kt)("li",{parentName:"ul"},"Users belonging to the organizations need to make use of the decentralized\necosystem authenticating via their Identity Services"),(0,i.kt)("li",{parentName:"ul"},"Different organizations could use totally independent and different\ninfrastructure and technical solutions"),(0,i.kt)("li",{parentName:"ul"},"The rules governing the authorization of users within the organization are\nkept in the Domain Controllers. It\u2019s not recommended to replicate that\ninformation in a different centralized or decentralized repository"),(0,i.kt)("li",{parentName:"ul"},"Users belonging to an organization don\u2019t want to add a new mechanism to\nauthenticate. They are already using their single sign-on (SSO) solution\nwithin the organization"),(0,i.kt)("li",{parentName:"ul"},"DLT networks use credentials for identifying, authenticate and authorize users\nin a decentralized environment"),(0,i.kt)("li",{parentName:"ul"},"Users need to make a friction-less interaction with the decentralized\napplications connected to the ecosystem without knowing the underlying\ncredentials management (DLT wallets)")),(0,i.kt)("h3",{id:"requirements"},"Requirements"),(0,i.kt)("p",null,"The main requirements used to designed the solution are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Multiple and independent organizations need to manage the access control to\nthe assets registered in a decentralized ecosystem"),(0,i.kt)("li",{parentName:"ul"},"A Subject manager or Admin wants to manage the access control to the subjects\nhe/she controls using the Domain Controller solution used in the organization"),(0,i.kt)("li",{parentName:"ul"},"The Admin needs to manage the subjects access control via users and groups"),(0,i.kt)("li",{parentName:"ul"},"The users of a organization need to operate in the DLT network to interact\nwith the subjects registered in that network"),(0,i.kt)("li",{parentName:"ul"},"The users of the decentralized ecosystem are identified in that network via\ncredentials based in the Wallet technologies used in the DLT network"),(0,i.kt)("li",{parentName:"ul"},"The users need have a mapping between their organization identity and their\ndecentralized ecosystem identity"),(0,i.kt)("li",{parentName:"ul"},"The Users or Holders keep their identity that only belongs to them. They need\nto present the credentials issued by the organizations they belong to verify\ntheir identity."),(0,i.kt)("li",{parentName:"ul"},"The users can belong to one or many groups in one or many different\norganizations"),(0,i.kt)("li",{parentName:"ul"},"A user of the organization A wants to give permissions of a user or group of\nthe organization B for making use of a subject or asset registered in a\ndecentralized environment"),(0,i.kt)("li",{parentName:"ul"},"Users managing permissions on these decentralized assets should be able to add\nand revoke permissions"),(0,i.kt)("li",{parentName:"ul"},"The schemas and data existing in the individual deployments of the Identity\nServices shouldn't be replicated in the decentralized ecosystem. The source of\ntruth are the Identity Services instances"),(0,i.kt)("li",{parentName:"ul"},"Information kept about the users and groups in the DLT network must be minimal\nand never store PI. Ideally only ids and hashes"),(0,i.kt)("li",{parentName:"ul"},"The decentralized ecosystem register assets and the conditions for who can\ninteract and what is possible to do with these assets is kept on-chain"),(0,i.kt)("li",{parentName:"ul"},"Public information about users like users public keys should be available.\nUser information should be resolvable via decentralized identifiers")),(0,i.kt)("h2",{id:"architecture"},"Architecture"),(0,i.kt)("h3",{id:"identity-management"},"Identity Management"),(0,i.kt)("p",null,"The proposed solution involves the deployment of a component called\n",(0,i.kt)("strong",{parentName:"p"},"Identity NODE"),". Each Domain Controller in the Ecosystem needs to provide\none Identity NODE in charge of bridge the internals domain authorization\npolicies with the rest of the world. So it\u2019s assumed for each independent Domain\nController available in the network, there should be at least one Identity\nNODE resolving for the Domain Controller policies."),(0,i.kt)("p",null," ",(0,i.kt)("img",{alt:"W3C Actors in Verifiable Credentials",src:n(73940).Z,width:"960",height:"540"})),(0,i.kt)("p",null,"In this scenario each Domain Controller keeps control of the identities of his\ndomain. The only actions that are done by the Domain Controllers are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"They identify users as in part of the domain"),(0,i.kt)("li",{parentName:"ul"},"They identify users as part of a group within the domain"),(0,i.kt)("li",{parentName:"ul"},"They are network isolated and respond to authorization queries to the\nassociated Identity NODE")),(0,i.kt)("h4",{id:"verifiable-credentials-associated-with-nevermined-assets"},"Verifiable Credentials associated with Nevermined assets"),(0,i.kt)("p",null,"In Nevermined an Asset can represent any kind of subject registered in the\nnetwork. Typically assets represent datasets, algorithms, services, etc.\nAny registered asset within Nevermined always has associated a Decentralized\nIdentifier (DID) that can be resolved into a DID Object (DDO)."),(0,i.kt)("p",null,"Typically a DDO includes metadata information describing the asset and the\nservices that are offered by that asset to the rest of the network (access,\ncomputation, etc.). In addition to this, a DDO can include a portion\ndescribing the users and/or groups that can interact with the asset.\nThis is modeled in the DDO in the shape of W3C Verifiable Credentials."),(0,i.kt)("p",null,"Here you can see an example of a fragment of a DDO including the credentials of\nan asset for different subjects:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "@context": "https://www.w3.org/2018/credentials/v1",\n    "type": ["access"],\n    "issuer": "0x610D9314EDF2ced7681BA1633C33fdb8cF365a12",\n    "issuanceDate": "2019-01-01T19:73:24Z",\n    "credentialSubject": [{\n        "id": "0x1234",\n        "type": "User"\n    }, {\n        "id": "0x5678",\n        "type": "User"\n    }, {\n        "id": "Group XXX",\n        "type": "Group"\n    }]\n}\n')),(0,i.kt)("p",null,"In the above verifiable credential fragment we are associating access\npermissions to any holder of the credentials able to authorize the users\n\u201c0x1234\u201d or \u201c0x5678\u201d or as part of the group \u201cGroup XXX\u201d of the domain."),(0,i.kt)("h3",{id:"json-web-tokens-jwt"},"Json Web Tokens (JWT)"),(0,i.kt)("p",null,"JSON Web Tokens (JWT) is a compact URL-safe means of representing claims to be\ntransferred between two parties. The claims in a JSON Web Tokens are encoded as\na JavaScript Object Notation (JSON) object that is used as the payload of a JSON\nWeb Signature (JWS) structure or as the plaintext of a JSON Web Encryption\n(JWE) structure, enabling the claims to be digitally signed or MACed and/or\nencrypted."),(0,i.kt)("p",null,"JSON Web Token (JWT) is an open standard ",(0,i.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7519"},"RFC 7519"),"\nthat defines a compact and self-contained way for securely transmitting\ninformation between parties as a JSON Object. This information can be verified\nand trusted because it is digitally signed. JSON Web Tokens can be signed using\na secret (with HMAC algorithm) or a public/private key pair using RSA."),(0,i.kt)("p",null,"In the architecture design we use JWT for encapsulating the messages between the\ndifferent parties.\nJSON Web Tokens consist of three parts separated by dots (.), which are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Header"),(0,i.kt)("li",{parentName:"ul"},"Payload"),(0,i.kt)("li",{parentName:"ul"},"Signature")),(0,i.kt)("p",null,"Therefore, a JWT typically looks like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Xxxxx.yyyyy.zzzzz\n")),(0,i.kt)("p",null,"In this architecture document, all the JWT messages sent from a client to a\nserver are using the HTTP Authorization header with the Bearer scheme. Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-http"},"HTTP GET /api/v1/node/resource\n\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIXVCJ9TJV...r7E20RMHrHDcEfxjoYZgeFONFh7HgQ\n")),(0,i.kt)("h4",{id:"jwt-structure"},"JWT Structure"),(0,i.kt)("p",null,"The header contains the metadata for the token and at a minimal contains the\ntype of the signature and/or encryption algorithm:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'"typ" - the type of the token, which is JWT'),(0,i.kt)("li",{parentName:"ul"},'"alg" - the hashing algorithm such as ES256. We are using ECDSA with SHA256.'),(0,i.kt)("li",{parentName:"ul"},'"cty" - Header Parameter defined by JSON Web Signature and JSON Web Encryption\nis used by this specification to convey structural information about the JWT.')),(0,i.kt)("p",null,"In our case the header is gonna look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "typ": "JWT",\n  "alg": "ES256",\n  "cty": "arbitrary"\n}\n')),(0,i.kt)("h4",{id:"jwt-payload"},"JWT Payload"),(0,i.kt)("p",null,"The payload contains the claims. Claims are statements about an entity\n(typically, the user) and additional metadata. There are three types of claims:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Reserved claims: These are a set of predefined claims, which are not mandatory\nbut recommended, thought to provide a set of useful, interoperable claims."),(0,i.kt)("li",{parentName:"ul"},"Public claims: These can be defined at will by those using JWTs. But to avoid\ncollisions they should be defined in the IANA JSON Web Token Registry or be\ndefined as a URI that contains a collision resistant namespace."),(0,i.kt)("li",{parentName:"ul"},"Private claims: These are the custom claims created to share information\nbetween parties that agree on using them.")),(0,i.kt)("p",null,"In our case the payload will have the following attributes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"iss")," - Issuer. address of the holder"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sub")," - Subject, id of the service agreement"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"aud")," - Audience, address of the node")),(0,i.kt)("p",null,"Here an example of the payload:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "iss": "0x123456",\n  "sub": "did:nv:abcde",\n  "aud": "0xffffff"\n}\n')),(0,i.kt)("h3",{id:"identity-nodes"},"Identity Nodes"),(0,i.kt)("p",null,"In this architecture the Identity Node is in charge of:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Expose to the network the interface allowing to ask for the details of a\nDomain Controller."),(0,i.kt)("li",{parentName:"ul"},"Resolve a Domain Controller DID into a DDO describing it. Each Domain\nController should have associated a unique Decentralized Identifier (DID) that\nresolves into URL where is kept the Decentralized Document (DDO) describing\nthe Domain Controller."),(0,i.kt)("li",{parentName:"ul"},"Verify the identity of a Holder. When a Holder presents a digital identity it\nauthenticates the Holder. Typically this is happening verifying the signature\ngiven by the Holder for a specific Subject"),(0,i.kt)("li",{parentName:"ul"},"Check the authorization of a Holder over a Subject. When a Holder claims\nauthorization for a Subject it integrates with the Domain Controller for\nverifying the authorization of that Holder."),(0,i.kt)("li",{parentName:"ul"},"Generates, Signs and Issues credentials"),(0,i.kt)("li",{parentName:"ul"},"Can present some emitted credentials on-chain")),(0,i.kt)("h3",{id:"interactions-between-the-actors"},"Interactions between the actors"),(0,i.kt)("p",null,"The following flow describes the interaction between actors allowing a Holder to\npresent credentials related to a subject authorized by a Domain Controller."),(0,i.kt)("p",null," ",(0,i.kt)("img",{alt:"Identity Management Flow",src:n(24814).Z,width:"960",height:"540"})),(0,i.kt)("p",null,"The different steps are:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The Holder presents a credentials request related to a subject"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-http"}," HTTP GET /api/v1/node/services/oauth2/token\n\n Authorization: Bearer eyJhbGciOiJIUzI1NiIXVCJ9TJV...r7E20RMHrHDcEfxjoYZgeFONFh7HgQ\n")),(0,i.kt)("p",{parentName:"li"},"Where the JWT payload is:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},' {\n   "iss": "0x123456", // address of the holder\n   "sub": "0xabcde", // id of the service agreement\n   "aud": "0xffffff" // address of the Nevermined Node\n }\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The Node decodes the JWT message, and validates the identity of the Holder\nchecking the signature and the issuer address provided")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The Node queries the domain controller checking the access permissions of\nthe Holder for a specific Subject. The identity Node could integrate\ndifferent kinds of backends like Active Directory, LDAP, databases, etc.\nThe verifiable credentials can include user or group types of\ncredentials subjects. The identity Node must validate if the user just\nauthenticated fulfill any of the following:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If is a user part of the Domain Controller"),(0,i.kt)("li",{parentName:"ul"},"If the user is part of any of the credential groups within the Domain"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"If the Domain Controller validates the Holder has access permissions, the\nIdentity Node will generate and sign a credential")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The credential is issued to the Holder in the JWT format included in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"access_token")," response parameter:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},' {\n  "access_token": "eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiIweDEyMzQ1NiIsInN1YiI6ImRpZDpudjphYmNkZSIsImF1ZCI6IjB4ZmZmZmZmIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyNTAwMjJ9.fiOSfeQwSiDi0ECFuDrHmhx8BHTHMl6MiyiJgJ6BIntjHvcFDFjPwtSYJrhYpeTcBPQ1FO5-fT-n4fQXBF92Vw"\n }\n')),(0,i.kt)("p",{parentName:"li"}," Which decoded has the following payload:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},' {\n   "iss": "0x123456",\n   "sub": "0xabcde",\n   "aud": "0xffffff",\n   "iat": 1516239022,\n   "exp": 1516250022\n }\n')),(0,i.kt)("p",{parentName:"li"}," In this case it includes the \u201ciat\u201d (when the token was emitted) and \u201cexp\u201d\n(when the token is expiring).")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"The Holder can present the credentials to a Smart Contract or Optionally the\nIdentity Node could present the credentials to a Smart Contract on behalf\nof the Holder."))),(0,i.kt)("h3",{id:"node-jwt-implementation"},"Node JWT implementation"),(0,i.kt)("p",null,"The Node implements the ",(0,i.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc6749"},"RFC6749: The OAuth 2.0 Authorization Framework")," framework using ",(0,i.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7523"},"JWTs as Authorization Grants")," and ",(0,i.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/draft-ietf-oauth-access-token-jwt-10"},"JWTs as Access Tokens")),(0,i.kt)("h4",{id:"jwt-authorization-grants"},"JWT Authorization Grants"),(0,i.kt)("p",null,"The claims that should be contained in a JWT Authorization Grant depend on the action that we want to perform on the Node. The claims validation follow ",(0,i.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7523#section-3"},"RFC7523"),". Overall the claim options look like this:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Registered name claims")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "iss": {"essential": true},\n  "sub": {"essential": false},\n  "aud": {\n    "essential": true,\n      "values": [\n        "/api/v1/node/services/access",\n        "/api/v1/node/services/compute",\n        "/api/v1/node/services/download",\n        "/api/v1/node/services/execute"\n      ],\n    },\n    "exp": {"essential": true},\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"iss"),": Is the ethereum address of the consumer"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sub"),": (optional): Is the Service Agreement Id if applicable"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"aud"),": Is the path of the endpoint being called"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"exp"),": Is the expiration time")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Private name claims")),(0,i.kt)("p",null,"These claims are specific to Nevermined"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "did": {"essential": false},\n  "execution_id": {"essential": false}\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"did")," (optional): Is the DID of the related asset"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"execution_id")," (optional): Is the execution id of the related compute job")),(0,i.kt)("p",null,"To request a JWT access token a client needs to make a request to the token endpoint (",(0,i.kt)("inlineCode",{parentName:"p"},"/api/v1/services/oauth2/token"),") by sendinf the following parameters using ",(0,i.kt)("inlineCode",{parentName:"p"},"application/x-www-form-urlencoded")," format as per ",(0,i.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc6749#section-4.1.3"},"RFC6749")," with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer"),": The grant type as per ",(0,i.kt)("a",{parentName:"li",href:"https://tools.ietf.org/html/rfc7523#section-2.1"},"RFC7523")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"assertion=<jwt grant token>"),": The assertion with a single JWT grant token as per ",(0,i.kt)("a",{parentName:"li",href:"https://tools.ietf.org/html/rfc7523#section-2.1"},"RFC7523"))),(0,i.kt)("p",null,"For examples JWT Grant tokens check ",(0,i.kt)("a",{parentName:"p",href:"#examples-of-jwt-grant-tokens"},"Examples of JWT Grant Tokens")," in the ",(0,i.kt)("a",{parentName:"p",href:"#annex"},"Annex"),"."),(0,i.kt)("h3",{id:"adding-and-revoking-permissions"},"Adding and Revoking Permissions"),(0,i.kt)("p",null,"The administrator of the Domain typically uses the Domain Controller as a unique\nsource of truth for the access control of users and groups. Because the\nidentity Node asks the Domain Controller for the belonging of users and\ngroups as part of the domain, any modification of the permissions in the Domain\nController policies will be extended automatically to the new authorization\nqueries responded by the Identity Node."),(0,i.kt)("p",null,"For the cases where an access token was already given to a user, this will be\nvalid during the lifetime of the credentials assigned to the user. During that\nperiod of time, the credentials will be valid for access to the resources\ngranted. Because of that it is recommended to configure the identity Node to\nnot emit credentials with very long expiration time."),(0,i.kt)("p",null,"To complement this, the Identity Node could integrate a cache system to keep\ntrack of the credentials granted during their life-cycle, and expose a method\nfor revoking credentials immediately. In that scenario if a Domain Account needs\nto revoke some credentials related to a Holder and a Subject, it should send a\nrequest to the Identity Node using the following format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-http"}," HTTP DELETE /api/v1/node/services/domain/credentials\n\n Authorization: Bearer eyJhbGciOiJIUzI1NiIXVCJ9TJV...r7E20RMHrHDcEfxjoYZgeFONFh7HgQ\n")),(0,i.kt)("p",null," Where the JWT payload is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},' {\n   "iss": "0x123456", // address of the domain controller\n   "sub": "0xabcd", // id of the service agreement\n   "aud": "0xffffff" // address of the Node\n }\n')),(0,i.kt)("p",null,"For this request the Identity Node needs to authenticate the Domain Account\nvia the signature. If all the validations are correct the Identity Node needs\nto send a revoke request to the Smart Contract keeping the authorization\npermissions on-chain."),(0,i.kt)("p",null,"This scenario is valid when the Identity Node integrates a DLT network to\nbackup the authorization permissions. If the Identity Node performs the\nvalidation for each request, this revocation won\u2019t be necessary because the next\nauthorization request via the Node will query the Domain Controller that\nshould have already revoked the authorization permissions."),(0,i.kt)("h2",{id:"annex"},"Annex"),(0,i.kt)("h3",{id:"serializing-did-documents"},"Serializing DID Documents"),(0,i.kt)("p",null,"Having a standard JSON document or subtract, the common operations used to\nserialize fragments of DID Documents is as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The object is sorted alphabetically by key, of the existing nested levels"),(0,i.kt)("li",{parentName:"ul"},"In the JSON generated, all the characters between entries are removed\n(\\n, \\t, \\r, whitespaces, etc.)"),(0,i.kt)("li",{parentName:"ul"},"As a result must be generated a string of only one line"),(0,i.kt)("li",{parentName:"ul"},"After serializing a DID Document or a fragment into a string line, typically\nit\u2019s necessary to hash that line to include as part of a different document or\nadding it on-chain. The common method used to do that is using the SHA3-256\n(Keccak-256) algorithm (you might have to convert the string to bytes first.)\n, making sure that final hash generated is prefixed by ",(0,i.kt)("inlineCode",{parentName:"li"},"0x"),".")),(0,i.kt)("h3",{id:"examples-of-jwt-grant-tokens"},"Examples of JWT Grant Tokens"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"/api/v1/node/services/access"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// header\n{\n  "alg": "ES256K",\n  "typ": "JWT"\n}\n\n// assertion\n{\n  "iss": "0x068Ed00cF0441e4829D9784fCBe7b9e26D4BD8d0",\n  "aud": "/api/v1/node/services/access",\n  "sub": "0xf527a6bbc35547f782dda34d64bb9070e743531107994899b1f97d4451aacbe1",\n  "iat": 1607967375,\n  "exp": 1607970975,\n  "did": "did:nv:5c19aaf5f7c12ef0a9d898d5a89ca5428f3d0315b0f0a36f5b5d097166e53788"\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"/api/v1/node/services/compute"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// header\n{\n  "alg": "ES256K",\n  "typ": "JWT"\n}\n\n// assertion\n{\n  "iss": "0x068Ed00cF0441e4829D9784fCBe7b9e26D4BD8d0",\n  "aud": "/api/v1/node/services/compute",\n  "sub": "0x3228c55d6e444cdc87bd5425896d5cdfa1e42e0734d04866a6c4386ef4f20144",\n  "iat": 1607968935,\n  "exp": 1607972535,\n  "execution_id": "nevermined-compute-82v5j"\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"/api/v1/node/services/download"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// header\n{\n  "alg": "ES256K",\n  "typ": "JWT"\n}\n\n// assertion\n{\n  "iss": "0x00Bd138aBD70e2F00903268F3Db08f2D25677C9e",\n  "aud": "/api/v1/node/services/download",\n  "iat": 1607969122,\n  "exp": 1607972722,\n  "did": "did:nv:2379d3e2d03f25b8e5fb2fae6e6adeb45cd7674d20905fc172d84915ff68cc73"\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"strong"},"/api/v1/node/services/execute"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'// header\n{\n  "alg": "ES256K",\n  "typ": "JWT"\n}\n\n// assertion\n{\n  "iss": "0x068Ed00cF0441e4829D9784fCBe7b9e26D4BD8d0",\n  "aud": "/api/v1/node/services/execute",\n  "sub": "0x715954fd8a9b48968983ae9b9813e169b4be0d861ccb4bbd8489298cda59c6a9",\n  "iat": 1607969247,\n  "exp": 1607972847,\n  "did": "did:nv:e689ed382b15e190a5937f5c070843cce249a692ff09931d570e288bd91e5b81"\n}\n')))}h.isMDXComponent=!0},24814:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/identity_management_flow-47b87694c8f5c9741af3d894935e7fff.png"},73940:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/identity_management_with_onchain_acl-a2d7df7178d51e7cbdaf76d4b08e942a.png"},49245:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/w3c_verifiable_credentials_actors-582d567bad1a138ff3e9cd162f8e2cb6.png"}}]);