"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5242],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=s(n),u=r,k=c["".concat(d,".").concat(u)]||c[u]||m[u]||i;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},0:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={},l="Namespace: AccountService",o={unversionedId:"react-components/catalog/API/modules/AccountService",id:"react-components/catalog/API/modules/AccountService",title:"Namespace: AccountService",description:"Table of contents",source:"@site/docs/react-components/catalog/API/modules/AccountService.md",sourceDirName:"react-components/catalog/API/modules",slug:"/react-components/catalog/API/modules/AccountService",permalink:"/docs/react-components/catalog/API/modules/AccountService",draft:!1,editUrl:"https://github.com/nevermined-io/docs/tree/main/docs/react-components/catalog/API/modules/AccountService.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Interface: UserProfileParams",permalink:"/docs/react-components/catalog/API/interfaces/UserProfileParams"},next:{title:"Namespace: AssetService",permalink:"/docs/react-components/catalog/API/modules/AssetService"}},d={},s=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Functions",id:"functions",level:3},{value:"Functions",id:"functions-1",level:2},{value:"useAccountCollection",id:"useaccountcollection",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"useAccountReleases",id:"useaccountreleases",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"useIsAssetHolder",id:"useisassetholder",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"useIsNFT1155Holder",id:"useisnft1155holder",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"useIsNFT721Holder",id:"useisnft721holder",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-4",level:4},{value:"useUserProfile",id:"useuserprofile",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Defined in",id:"defined-in-5",level:4}],p={toc:s};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"namespace-accountservice"},"Namespace: AccountService"),(0,r.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/react-components/catalog/API/modules/AccountService#useaccountcollection"},"useAccountCollection")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/react-components/catalog/API/modules/AccountService#useaccountreleases"},"useAccountReleases")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/react-components/catalog/API/modules/AccountService#useisassetholder"},"useIsAssetHolder")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/react-components/catalog/API/modules/AccountService#useisnft1155holder"},"useIsNFT1155Holder")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/react-components/catalog/API/modules/AccountService#useisnft721holder"},"useIsNFT721Holder")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/react-components/catalog/API/modules/AccountService#useuserprofile"},"useUserProfile"))),(0,r.kt)("h2",{id:"functions-1"},"Functions"),(0,r.kt)("h3",{id:"useaccountcollection"},"useAccountCollection"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"useAccountCollection"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"walletAddress"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"Get account owned nfts"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const MyComponent = () => {\n const { isLoading, accountCollection  } = AccountService.useAccountCollection(userAddr);\n\n return (\n  <>\n     {accountCollection.map((a) => {\n         return (\n             <div>\n                 <div>{a}</div>\n             </div>\n         )\n     })}\n  </>\n )\n}\n")),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"walletAddress")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"user address")))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"accountCollection")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string"),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"All the nfts owned by the account")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"isLoading")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"If the nfts are still loading")))),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/nevermined-io/react-components/blob/109ddcb/catalog/src/services/account.ts#L76"},"services/account.ts:76")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"useaccountreleases"},"useAccountReleases"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"useAccountReleases"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"walletAddress"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"Get account releases(mints)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const MyComponent = () => {\n const { isLoading, accountReleases  } = AccountService.useAccountReleases();\n\n return (\n  <>\n     {accountReleases.map((a) => {\n         return (\n             <div>\n                 <div>{a}</div>\n             </div>\n         )\n     })}\n  </>\n )\n}\n")),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"walletAddress")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"user address")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"accountReleases")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string"),"[]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"isLoading")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean"))))),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/nevermined-io/react-components/blob/109ddcb/catalog/src/services/account.ts#L32"},"services/account.ts:32")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"useisassetholder"},"useIsAssetHolder"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"useIsAssetHolder"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"did"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"walletAddress"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"This method validates if an user is an asset holder."),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"did")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The unique identifier of the asset")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"walletAddress")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The public address of the user")))),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"true if the user owns at least one edition of the NFT"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ownAsset")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean"))))),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/nevermined-io/react-components/blob/109ddcb/catalog/src/services/account.ts#L495"},"services/account.ts:495")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"useisnft1155holder"},"useIsNFT1155Holder"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"useIsNFT1155Holder"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"did"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"walletAddress"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"This method validates if a user is a NFT (ERC-1155 based) holder for a specific ",(0,r.kt)("inlineCode",{parentName:"p"},"tokenId"),".\nFor ERC-1155 tokens, we use the DID as tokenId. A user can between zero an multiple editions\nof a NFT (limitted by the NFT cap)."),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"did")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The unique identifier of the NFT within a NFT ERC-1155 contract")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"walletAddress")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The public address of the user")))),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"true if the user owns at least one edition of the NFT"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ownNFT1155")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean"))))),(0,r.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/nevermined-io/react-components/blob/109ddcb/catalog/src/services/account.ts#L530"},"services/account.ts:530")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"useisnft721holder"},"useIsNFT721Holder"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"useIsNFT721Holder"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"nftAddress"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"walletAddress"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"This method validates if a user is a NFT (ERC-721 based) holder for a specific NFT contract address.\nFor ERC-1155 tokens, we use the DID as tokenId. A user can between zero an multiple editions\nof a NFT (limitted by the NFT cap)."),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"nftAddress")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The contract address of the ERC-721 NFT contract")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"walletAddress")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The public address of the user")))),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"true if the user holds the NFT"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ownNFT721")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean"))))),(0,r.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/nevermined-io/react-components/blob/109ddcb/catalog/src/services/account.ts#L566"},"services/account.ts:566")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"useuserprofile"},"useUserProfile"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"useUserProfile"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"walletAddress"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("p",null,"Custom hook to handle User Profile: login, profile description, add new accounts, etc..."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("p",null,"Profile dashboard example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { useEffect, useRef } from 'react'\nimport { AccountService } from '@nevermined-io/catalog'\nimport { MetaMask } from '@nevermined-io/providers'\nimport {\n  UiForm,\n  UiFormGroup,\n  UiFormInput,\n  UiFormItem,\n  Orientation,\n  UiButton,\n  UiLayout,\n  UiText,\n  UiDivider,\n  UiPopupHandlers,\n  NotificationPopup,\n  BEM\n} from '@nevermined-io/styles'\nimport { NextPage } from 'next'\nimport styles from './user-profile.module.scss'\n\nconst b = BEM('user-profile', styles)\n\ninterface AdditionalInformation {\n  linkedinProfile: string\n}\n\nexport const UserProfile: NextPage = () => {\n  const { walletAddress } = MetaMask.useWallet()\n  const {\n    errorMessage,\n    successMessage,\n    inputError,\n    isUpdated,\n    isAddressAdded,\n    setUserProfile,\n    userProfile,\n    addresses,\n    newAddress,\n    submitUserProfile,\n    addAddress\n  } = AccountService.useUserProfile(walletAddress)\n\n  const popupRef = useRef<UiPopupHandlers>()\n\n  const closePopup = (event: any) => {\n    popupRef.current?.close()\n    event.preventDefault()\n  }\n\n  useEffect(() => {\n    if (errorMessage) {\n      popupRef.current?.open()\n    }\n  }, [errorMessage])\n\n  return (\n    <UiLayout type=\"container\">\n      <NotificationPopup closePopup={closePopup} message={errorMessage} popupRef={popupRef} />\n      <UiLayout type=\"container\">\n        <UiText wrapper=\"h1\" type=\"h1\" variants={['heading']}>\n          User Profile account\n        </UiText>\n        <UiText type=\"h2\" wrapper=\"h2\">\n          Update your profile\n        </UiText>\n      </UiLayout>\n      <UiDivider />\n      <UiLayout type=\"container\">\n        <div className={b('profile-horizontal-line')} />\n        <UiForm>\n          <UiFormGroup orientation={Orientation.Vertical}>\n            <UiFormInput\n              className={b('profile-form-input')}\n              label=\"Nickname *\"\n              inputError={inputError}\n              value={userProfile.nickname}\n              onChange={(e) => setUserProfile({ ...userProfile, nickname: e.target.value })}\n              placeholder=\"Type your nickname\"\n            />\n          </UiFormGroup>\n          <UiFormGroup orientation={Orientation.Vertical}>\n            <UiFormInput\n              className={b('profile-form-input')}\n              label=\"Name\"\n              value={userProfile.name}\n              onChange={(e) => setUserProfile({ ...userProfile, name: e.target.value })}\n              placeholder=\"Type your name\"\n            />\n          </UiFormGroup>\n          <UiFormGroup orientation={Orientation.Vertical}>\n            <UiFormInput\n              className={b('profile-form-input')}\n              label=\"Email\"\n              value={userProfile.email}\n              onChange={(e) => setUserProfile({ ...userProfile, email: e.target.value })}\n              placeholder=\"Type your email\"\n            />\n          </UiFormGroup>\n          <UiFormGroup orientation={Orientation.Vertical}>\n            <UiFormInput\n              className={b('profile-form-input')}\n              label=\"Link Profile\"\n              placeholder=\"Type your link profile\"\n              value={(userProfile.additionalInformation as AdditionalInformation)?.linkedinProfile}\n              onChange={(e) =>\n                setUserProfile({\n                  ...userProfile,\n                  additionalInformation: {\n                    linkedinProfile: e.target.value\n                  }\n                })\n              }\n            />\n          </UiFormGroup>\n          <div className={b('profile-submit-container')}>\n            <div className={b('profile-submit-container', ['updated-message'])}>\n              {isUpdated ? (\n                <UiText type=\"h3\" wrapper=\"h3\" variants={['success']}>\n                  {successMessage}\n                </UiText>\n              ) : null}\n            </div>\n            <div className={b('profile-submit-container', ['submit'])}>\n              <UiButton onClick={submitUserProfile}>Update Profile</UiButton>\n            </div>\n          </div>\n        </UiForm>\n      </UiLayout>\n      <UiLayout type=\"container\" className={b('profile-addresses')}>\n        <UiText type=\"h2\" wrapper=\"h2\">\n          Addresses\n        </UiText>\n        <div className={b('profile-horizontal-line')} />\n        <UiForm>\n          <div>\n            <UiText type=\"h3\">Current Addresses</UiText>\n          </div>\n          <div>\n            <UiText variants={['detail']}>\n              Change your wallet account to add more address to your profile\n            </UiText>\n          </div>\n\n          <div className={b('profile-current-addresses-container')}>\n            {addresses.map((a) => (\n              <div key={a} className={b('profile-current-address')}>\n                {a}\n              </div>\n            ))}\n          </div>\n\n          {newAddress && (\n            <UiFormGroup orientation={Orientation.Vertical} className={b('profile-add-address')}>\n              <UiFormItem\n                label=\"Add new address\"\n                value={newAddress}\n                onClick={addAddress}\n                disabled={true}\n              />\n            </UiFormGroup>\n          )}\n\n          <div className={b('profile-submit-container')}>\n            <div className={b('profile-submit-container', ['updated-message'])}>\n              {isAddressAdded ? (\n                <UiText type=\"h3\" wrapper=\"h3\" variants={['success']}>\n                  {successMessage}\n                </UiText>\n              ) : null}\n            </div>\n          </div>\n        </UiForm>\n      </UiLayout>\n    </UiLayout>\n  )\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"See"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/nevermined-io/defi-marketplace/blob/main/client/src/%2Bassets/user-profile.tsx"},"https://github.com/nevermined-io/defi-marketplace/blob/main/client/src/%2Bassets/user-profile.tsx")),(0,r.kt)("h4",{id:"parameters-5"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"walletAddress")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Address of the wallet account")))),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Object")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"addAddress")),(0,r.kt)("td",{parentName:"tr",align:"left"},"() => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"void"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Add new address")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"addresses")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string"),"[]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Addresses wallet accounts included in the user profile")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"errorMessage")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Error messages that come from sdk")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"inputError")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Input error message")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"isAddressAdded")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"If new address is added")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"isTokenGenerated")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"If token has been generated")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"isUpdated")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"left"},"If profile is updated")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"newAddress")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"New address to add in the user profile")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"reloadUserProfile")),(0,r.kt)("td",{parentName:"tr",align:"left"},"() => ",(0,r.kt)("inlineCode",{parentName:"td"},"void")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Reload current user profile")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"setUserProfile")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Dispatch"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"SetStateAction"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"Partial"),"<",(0,r.kt)("a",{parentName:"td",href:"/docs/react-components/catalog/API/interfaces/UserProfileParams"},(0,r.kt)("inlineCode",{parentName:"a"},"UserProfileParams")),">",">",">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Set parameters to user profile")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"submitUserProfile")),(0,r.kt)("td",{parentName:"tr",align:"left"},"() => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise"),"<",(0,r.kt)("inlineCode",{parentName:"td"},"void"),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Submit user profile")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"successMessage")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Success messages")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"userProfile")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Partial"),"<",(0,r.kt)("a",{parentName:"td",href:"/docs/react-components/catalog/API/interfaces/UserProfileParams"},(0,r.kt)("inlineCode",{parentName:"a"},"UserProfileParams")),">"),(0,r.kt)("td",{parentName:"tr",align:"left"},"User profile parameters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"userProfileLoadingStatus")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"null")," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"loading"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"loaded"')," ","|"," ",(0,r.kt)("inlineCode",{parentName:"td"},'"failed"')),(0,r.kt)("td",{parentName:"tr",align:"left"},"Indicates current user profile loading status")))),(0,r.kt)("h4",{id:"defined-in-5"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/nevermined-io/react-components/blob/109ddcb/catalog/src/services/account.ts#L288"},"services/account.ts:288")))}m.isMDXComponent=!0}}]);