"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3710],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>v});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),o=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=o(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=o(n),v=r,k=c["".concat(d,".").concat(v)]||c[v]||m[v]||i;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},76246:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var a=n(87462),r=(n(67294),n(3905));const i={},l="Namespace: EventService",s={unversionedId:"catalog/catalog/API/modules/EventService",id:"catalog/catalog/API/modules/EventService",title:"Namespace: EventService",description:"Table of contents",source:"@site/docs/catalog/catalog/API/modules/EventService.md",sourceDirName:"catalog/catalog/API/modules",slug:"/catalog/catalog/API/modules/EventService",permalink:"/docs/catalog/catalog/API/modules/EventService",draft:!1,editUrl:"https://github.com/nevermined-io/docs/tree/main/docs/catalog/catalog/API/modules/EventService.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Namespace: Catalog",permalink:"/docs/catalog/catalog/API/modules/Catalog"},next:{title:"Namespace: SubscribeService",permalink:"/docs/catalog/catalog/API/modules/SubscribeService"}},d={},o=[{value:"Table of contents",id:"table-of-contents",level:2},{value:"Functions",id:"functions",level:3},{value:"Functions",id:"functions-1",level:2},{value:"getAssetRegisterEvent",id:"getassetregisterevent",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"getTransfers",id:"gettransfers",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"getUserFulfilledEvents",id:"getuserfulfilledevents",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"getUserRegisterEvents",id:"getuserregisterevents",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-3",level:4}],p={toc:o};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"namespace-eventservice"},"Namespace: EventService"),(0,r.kt)("h2",{id:"table-of-contents"},"Table of contents"),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/catalog/catalog/API/modules/EventService#getassetregisterevent"},"getAssetRegisterEvent")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/catalog/catalog/API/modules/EventService#gettransfers"},"getTransfers")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/catalog/catalog/API/modules/EventService#getuserfulfilledevents"},"getUserFulfilledEvents")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/catalog/catalog/API/modules/EventService#getuserregisterevents"},"getUserRegisterEvents"))),(0,r.kt)("h2",{id:"functions-1"},"Functions"),(0,r.kt)("h3",{id:"getassetregisterevent"},"getAssetRegisterEvent"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getAssetRegisterEvent"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"sdk"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"did"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("a",{parentName:"p",href:"/docs/catalog/catalog/API/interfaces/RegisterEvent"},(0,r.kt)("inlineCode",{parentName:"a"},"RegisterEvent")),"[]",">"),(0,r.kt)("p",null,"Get asset registering event"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Catalog, EventService } from "@nevermined-io/catalog";\nimport { useState } from "react";\n\nconst MyComponent = () => {\n const [events, setEvents] = useState<Transfer[]>([]);\n const { sdk } = Catalog.useNevermined();\n\n useEffect(() => {\n     const handler = async () => {\n          const t: Transfer[] = await EventService.getAssetRegisterEvent(sdk, receiverAddress)\n          setTransfers(t)\n     }\n }, [setEvents, sdk]);\n\n return (\n  <>\n     {events.map((p) => {\n         return (\n             <div>\n                 <div>{p._did}</div>\n                 <div>{p._owner}</div>\n                 <div>{p._lastUpdatedBy}</div>\n                 <div>{p._blockNumberUpdated}</div>\n             </div>\n         )\n     })}\n  </>\n )\n}\n')),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"sdk")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Nevermined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Nevermined instance")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"did")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"assets did")))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("a",{parentName:"p",href:"/docs/catalog/catalog/API/interfaces/RegisterEvent"},(0,r.kt)("inlineCode",{parentName:"a"},"RegisterEvent")),"[]",">"),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/nevermined-io/react-components/blob/4840188/catalog/src/services/event.ts#L261"},"services/event.ts:261")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"gettransfers"},"getTransfers"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getTransfers"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"sdk"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"receiver"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"nftType?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("a",{parentName:"p",href:"/docs/catalog/catalog/API/interfaces/Transfer"},(0,r.kt)("inlineCode",{parentName:"a"},"Transfer")),"[]",">"),(0,r.kt)("p",null,"Get recieved transfers by address and nft type"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Catalog, EventService } from "@nevermined-io/catalog";\nimport { useState } from "react";\n\nconst MyComponent = () => {\n const [transfers, setTransfers] = useState<Transfer[]>([]);\n const { sdk } = Catalog.useNevermined();\n\n useEffect(() => {\n     const handler = async () => {\n          const t: Transfer[] = await EventService.getTransfers(sdk, receiverAddress)\n          setTransfers(t)\n     }\n }, [receiverAddress, sdk]);\n\n return (\n  <>\n     {transfers.map((p) => {\n         return (\n             <div>\n                 <div>{p.id}</div>\n                 <div>{p._did}</div>\n                 <div>{p._agreementId}</div>\n                 <div>{p._receiver}</div>\n             </div>\n         )\n     })}\n  </>\n )\n}\n')),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Default value"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"sdk")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Nevermined")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Nevermined instance")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"receiver")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"undefined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Transfers receiver address")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"nftType")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ERCType")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"1155")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Choose the NFT type. Default value 1155")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("a",{parentName:"p",href:"/docs/catalog/catalog/API/interfaces/Transfer"},(0,r.kt)("inlineCode",{parentName:"a"},"Transfer")),"[]",">"),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/nevermined-io/react-components/blob/4840188/catalog/src/services/event.ts#L49"},"services/event.ts:49")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getuserfulfilledevents"},"getUserFulfilledEvents"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getUserFulfilledEvents"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"sdk"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"account"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("a",{parentName:"p",href:"/docs/catalog/catalog/API/interfaces/FulfilledOrders"},(0,r.kt)("inlineCode",{parentName:"a"},"FulfilledOrders")),"[]",">"),(0,r.kt)("p",null,"Get fullfilled nft transfer events by user address"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import Catalog from "@nevermined-io/catalog";\nimport { useState } from "react";\n\nconst MyComponent = () => {\n const [events, setEvents] = useState<Transfer[]>([]);\n const { getUserFulfilledEvents } = Catalog;\n const { sdk } = Catalog.useNevermined();\n\n useEffect(() => {\n     const handler = async () => {\n          const t: Transfer[] = await getUserFulfilledEvents(sdk, receiverAddress)\n          setTransfers(t)\n     }\n }, [setEvents, sdk]);\n\n return (\n  <>\n     {events.map((p) => {\n         return (\n             <div>\n                 <div>{p.id}</div>\n                 <div>{p._documentId}</div>\n             </div>\n         )\n     })}\n  </>\n )\n}\n')),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"sdk")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Nevermined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Nevermined instance")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"account")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"user address")))),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("a",{parentName:"p",href:"/docs/catalog/catalog/API/interfaces/FulfilledOrders"},(0,r.kt)("inlineCode",{parentName:"a"},"FulfilledOrders")),"[]",">"),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/nevermined-io/react-components/blob/4840188/catalog/src/services/event.ts#L121"},"services/event.ts:121")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getuserregisterevents"},"getUserRegisterEvents"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("strong",{parentName:"p"},"getUserRegisterEvents"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"sdk"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"owner"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("a",{parentName:"p",href:"/docs/catalog/catalog/API/interfaces/RegisterEvent"},(0,r.kt)("inlineCode",{parentName:"a"},"RegisterEvent")),"[]",">"),(0,r.kt)("p",null,"Get nft creating events registered by user"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"Example"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import { Catalog, EventService } from "@nevermined-io/catalog";\nimport { useState } from "react";\n\nconst MyComponent = () => {\n const [events, setEvents] = useState<Transfer[]>([]);\n const { sdk } = Catalog.useNevermined();\n\n useEffect(() => {\n     const handler = async () => {\n          const t: Transfer[] = await EventService.getUserRegisterEvents(sdk, receiverAddress)\n          setTransfers(t)\n     }\n }, [setEvents, sdk]);\n\n return (\n  <>\n     {events.map((p) => {\n         return (\n             <div>\n                 <div>{p.id}</div>\n                 <div>{p._did}</div>\n                 <div>{p._owner}</div>\n                 <div>{p._lastUpdatedBy}</div>\n                 <div>{p._blockNumberUpdated}</div>\n             </div>\n         )\n     })}\n  </>\n )\n}\n')),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"sdk")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Nevermined")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Nevermined instance")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"owner")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"left"},"user address of events publisher")))),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"<",(0,r.kt)("a",{parentName:"p",href:"/docs/catalog/catalog/API/interfaces/RegisterEvent"},(0,r.kt)("inlineCode",{parentName:"a"},"RegisterEvent")),"[]",">"),(0,r.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/nevermined-io/react-components/blob/4840188/catalog/src/services/event.ts#L190"},"services/event.ts:190")))}m.isMDXComponent=!0}}]);