"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6336],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var s=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,s,a=function(e,n){if(null==e)return{};var t,s,a={},o=Object.keys(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=s.createContext({}),d=function(e){var n=s.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return s.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},u=s.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return t?s.createElement(h,i(i({ref:n},c),{},{components:t})):s.createElement(h,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r.mdxType="string"==typeof e?e:a,i[1]=r;for(var d=2;d<o;d++)i[d]=t[d];return s.createElement.apply(null,i)}return s.createElement.apply(null,t)}u.displayName="MDXCreateElement"},31255:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var s=t(87462),a=(t(67294),t(3905));const o={sidebar_position:3},i="How to use React Components",r={unversionedId:"react-components/example",id:"react-components/example",title:"How to use React Components",description:"Requirements",source:"@site/docs/react-components/example.md",sourceDirName:"react-components",slug:"/react-components/example",permalink:"/docs/react-components/example",draft:!1,editUrl:"https://github.com/nevermined-io/docs/tree/main/docs/react-components/example.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"What can I do with the Nevermined React Components?",permalink:"/docs/react-components/functionalities"},next:{title:"Demo",permalink:"/docs/react-components/demo"}},l={},d=[{value:"Requirements",id:"requirements",level:2},{value:"How to get the source of this example?",id:"how-to-get-the-source-of-this-example",level:2},{value:"Let&#39;s start with the app config file",id:"lets-start-with-the-app-config-file",level:2},{value:"Setting the networks for web3 providers (optional)",id:"setting-the-networks-for-web3-providers-optional",level:2},{value:"The example file",id:"the-example-file",level:2},{value:"SDKInstance",id:"sdkinstance",level:3},{value:"SingleAsset",id:"singleasset",level:3},{value:"PublishAsset",id:"publishasset",level:3},{value:"BuyAsset",id:"buyasset",level:3},{value:"MMWallet",id:"mmwallet",level:3},{value:"App",id:"app",level:3},{value:"Complete example file",id:"complete-example-file",level:3},{value:"Styling",id:"styling",level:2},{value:"The index file",id:"the-index-file",level:2},{value:"Publish and buy encrypted assets with DTP (Data transfer proof)",id:"publish-and-buy-encrypted-assets-with-dtp-data-transfer-proof",level:2}],c={toc:d};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,s.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-use-react-components"},"How to use React Components"),(0,a.kt)("h2",{id:"requirements"},"Requirements"),(0,a.kt)("p",null,"Before you start with this demo you require:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"An extension of ",(0,a.kt)("a",{parentName:"li",href:"https://metamask.io/"},"Metamask")," installed in your browser"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://nodejs.org/en/"},"node")," and ",(0,a.kt)("a",{parentName:"li",href:"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"},"npm")," needs to be installed")),(0,a.kt)("h2",{id:"how-to-get-the-source-of-this-example"},"How to get the source of this example?"),(0,a.kt)("p",null,"You can install the example in your local machine and run it without installing anything. Information for how to do this can be found here ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nevermined-io/create-nevermined-react"},"here")),(0,a.kt)("h2",{id:"lets-start-with-the-app-config-file"},"Let's start with the app config file"),(0,a.kt)("p",null,"The first file that you need to create is the ",(0,a.kt)("inlineCode",{parentName:"p"},"config.ts")," file which contains all the ",(0,a.kt)("a",{parentName:"p",href:"/docs/nevermined-sdk/api-reference/classes/Config"},"options needed")," to initialize the ",(0,a.kt)("a",{parentName:"p",href:"/docs/react-components/catalog/"},"Catalog core"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { AuthToken, NeverminedOptions } from '@nevermined-io/catalog'\nimport { ethers } from 'ethers'\n\nexport const web3ProviderUri = process.env.REACT_APP_NODE_URI || 'https://matic-mumbai.chainstacklabs.com'\nexport const nodeAddress =\n  process.env.REACT_APP_GATEWAY_ADDRESS || '0x5838B5512cF9f12FE9f2beccB20eb47211F9B0bc'\nexport const neverminedNodeUri =\n  process.env.REACT_APP_GATEWAY_URI || 'https://node.mumbai.public.nevermined.network'\nexport const acceptedChainId = process.env.REACT_APP_ACCEPTED_CHAIN_ID || '80001' // for Mumbai\nexport const rootUri = process.env.REACT_APP_ROOT_URI || 'http://localhost:3445'\nexport const marketplaceUri = 'https://marketplace-api.mumbai.public.nevermined.network'\nconst graphHttpUri = process.env.GRAPH_HTTP_URI ||  'https://api.thegraph.com/subgraphs/name/nevermined-io/public'\n// represent USDC token in mumbai that can be claimed in the faucet https://calibration-faucet.filswan.com/#/dashboard\nexport const erc20TokenAddress = process.env.ERC20_TOKEN_ADDRESS || '0xe11a86849d99f524cac3e7a0ec1241828e332c62'\n\nexport const appConfig: NeverminedOptions = {\n  //@ts-ignore\n  web3Provider: typeof window !== 'undefined' ? window.ethereum : new ethers.providers.JsonRpcProvider(nodeUri),\n  neverminedNodeUri,\n  nodeAddress,\n  graphHttpUri,\n  marketplaceAuthToken: AuthToken.fetchMarketplaceApiTokenFromLocalStorage().token,\n  marketplaceUri,\n  artifactsFolder: `${rootUri}/contracts`,\n}\n")),(0,a.kt)("h2",{id:"setting-the-networks-for-web3-providers-optional"},"Setting the networks for web3 providers (optional)"),(0,a.kt)("p",null,"The next step is setting differents networks for the dapp ",(0,a.kt)("a",{parentName:"p",href:"https://polygon.technology/"},"polygon")," which does not require this file. However, we have included it in the example as it contains the networks settings for web3 providers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Wagmi } from \'@nevermined-io/catalog-providers\'\n\nconst ChainsConfig: Wagmi.Chain[] = [\n  Wagmi.chain.polygon,\n  Wagmi.chain.polygonMumbai,\n  {\n    id: 1337,\n    name: "Localhost development",\n    network: "spree",\n    nativeCurrency: {\n      name: "Ethereum",\n      symbol: "ETH",\n      decimals: 18,\n    },\n    rpcUrls: {\n      default: "http://localhost:8545"\n    },\n    testnet: true\n  },\n]\n\nexport default ChainConfig\n')),(0,a.kt)("h2",{id:"the-example-file"},"The example file"),(0,a.kt)("p",null,"The example file ",(0,a.kt)("inlineCode",{parentName:"p"},"src/example/index.tsx")," contains all the basic logic to handle a ",(0,a.kt)("a",{parentName:"p",href:"/docs/architecture/what-can-i-do#tokenization-of-assets-via-erc-1155-nfts-aka-nft-sales"},"NFT1155")," as a component. It outlines each functionality and component in detail."),(0,a.kt)("h3",{id:"sdkinstance"},"SDKInstance"),(0,a.kt)("p",null,"This component will check if ",(0,a.kt)("a",{parentName:"p",href:"/docs/nevermined-sdk/getting-started"},"sdk")," is loaded or not and display the status"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const SDKInstance = () => {\n  const { sdk, isLoadingSDK } = Catalog.useNevermined()\n\n  return (\n    <>\n      <UiLayout>\n        <UiText className={b('detail')} variants={['bold']}>Is Loading SDK:</UiText>\n        <UiText>{isLoadingSDK ? 'Yes' : 'No'}</UiText>\n      </UiLayout>\n\n      <UiLayout>\n        <UiText variants={['bold']} className={b('detail')}>Is SDK Avaialable:</UiText>\n        <UiText>{sdk && Object.keys(sdk).length > 0 ? 'Yes' : 'No'}</UiText>\n      </UiLayout>\n    </>\n  )\n}\n")),(0,a.kt)("h3",{id:"singleasset"},"SingleAsset"),(0,a.kt)("p",null,"It shows the content of the ddo object published"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const SingleAsset = ({ddo}: {ddo: DDO}) => {\n\n  return (\n    <>\n      <UiLayout>\n        <UiText className={b('detail')} variants={['bold']}>Asset {ddo.id.slice(0, 10)}...:</UiText>\n      </UiLayout>\n      <UiText className={b('ddo')} variants={['detail']}>{JSON.stringify(ddo)}</UiText>\n    </>\n  )\n}\n")),(0,a.kt)("h3",{id:"publishasset"},"PublishAsset"),(0,a.kt)("p",null,"It renders a button used to publish a new ",(0,a.kt)("a",{parentName:"p",href:"/docs/architecture/specs/Spec-NFT"},"NFT")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const PublishAsset = ({onPublish}: {onPublish: () => void}) => {\n  const { assets } = Catalog.useNevermined()\n\n  return (\n    <>\n      <UiButton onClick={onPublish} disabled={!Object.keys(assets).length}>\n        mint\n      </UiButton>\n    </>\n  )\n}\n")),(0,a.kt)("h3",{id:"buyasset"},"BuyAsset"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"BuyAsset")," component will display the button ",(0,a.kt)("inlineCode",{parentName:"p"},"buy")," in order to buy the asset if the wallet account is not a NFT1155 holder. Otherwise, the owner will display a download button to download the NFT asset"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const BuyAsset = ({ddo}: {ddo: DDO}) => {\n  const { assets, account, isLoadingSDK, nfts, sdk } = Catalog.useNevermined()\n  const { walletAddress } = MetaMask.useWallet()\n  const [ownNFT1155, setOwnNFT1155] = useState(false)\n  const [isBought, setIsBought] = useState(false)\n  const [owner, setOwner] = useState('')\n  \n  useEffect(() => {\n    (async () => {\n      setOwnNFT1155(await account.isNFT1155Holder(ddo.id, walletAddress))\n      setOwner(await sdk.assets.owner(ddo.id))\n    })()\n  }, [walletAddress, isBought])\n\nconst buy = async () => {\n    const response = await nfts.access({\n      did: ddo.id,\n      nftHolder: owner,\n      nftAmount: BigNumber.from(1),\n      ercType: 1155\n    })\n    setIsBought(Boolean(response))\n  }\n\n  const download = async () => {\n    await assets.downloadNFT({\n      did: ddo.id\n    })\n  }\n\n  return (\n    <UiLayout className={b('buy')}>\n      {ownNFT1155 ? (\n        <UiButton type='secondary' onClick={download} disabled={isLoadingSDK}>\n          Download NFT\n        </UiButton>\n      ) : (\n        owner !== walletAddress ?\n        <UiButton type='secondary' onClick={buy} disabled={isLoadingSDK}>\n          buy\n        </UiButton>\n        : <span>The owner cannot buy, please change the account to buy the NFT asset</span>\n      )}\n    </UiLayout>\n  )\n}\n")),(0,a.kt)("h3",{id:"mmwallet"},"MMWallet"),(0,a.kt)("p",null,"An important component for connecting to the wallet. Upon connecting, the app will display the address account. Otherwise it will render a button to connect to it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const MMWallet = () => {\n  const { login, walletAddress, getConnectors } = useWallet()\n  return (\n    <UiLayout>\n      <UiText variants={['bold']} className={b('detail')}>Wallet address:</UiText>\n      <UiText>{walletAddress}</UiText>\n      {!walletAddress && <UiButton type='secondary' onClick={() => login(getConnectors()[0])}>Connect To MM</UiButton>}\n    </UiLayout>\n  )\n}\n")),(0,a.kt)("h3",{id:"app"},"App"),(0,a.kt)("p",null,"The main component of the example, it pulls the rest of the components and also includes the function ",(0,a.kt)("inlineCode",{parentName:"p"},"onPublish")," with the logic to publish a NFT1155 which is transferred as a parameter to the component ",(0,a.kt)("a",{parentName:"p",href:"#publishasset"},"PublisAsset")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const App = () => {\n  const { isLoadingSDK, sdk } = Catalog.useNevermined()\n  const { publishNFT1155 } = AssetService.useAssetPublish()\n  const { walletAddress } = useWallet()\n  const [ddo, setDDO] = useState<DDO>({} as DDO)\n  const royaltyAttributes = {\n    royaltyKind: RoyaltyKind.Standard,\n    scheme: getRoyaltyScheme(sdk, RoyaltyKind.Standard),\n    amount: 0,\n  }\n\n  const metadata: MetaData = {\n    main: {\n      name: '',\n      files: [{\n        index: 0,\n        contentType: 'application/json',\n        url: 'https://uploads5.wikiart.org/00268/images/william-holbrook-beard/the-bear-dance-1870.jpg'\n      }],\n      type: 'dataset',\n      author: '',\n      license: '',\n      dateCreated: new Date().toISOString(),\n    }\n  }\n\n  const onPublish = async () => {\n    try {\n      const assetPriceMap = new Map([\n        [walletAddress, BigNumber.from(1)]\n      ])\n  \n      const assetPrice = new AssetPrice(assetPriceMap)\n      const networkFee = await sdk.keeper.nvmConfig.getNetworkFee()\n      const feeReceiver = await sdk.keeper.nvmConfig.getFeeReceiver()\n\n      assetPrice.addNetworkFees(feeReceiver, BigNumber.from(networkFee))\n      assetPrice.setTokenAddress(ERC_TOKEN)\n\n      const royaltyAttributes = {\n        royaltyKind: RoyaltyKind.Standard,\n        scheme: getRoyaltyScheme(sdk, RoyaltyKind.Standard),\n        amount: 0,\n      }\n\n      const nftAttributes = NFTAttributes.getNFT1155Instance({\n        metadata,\n        serviceTypes: ['nft-sales', 'nft-access'],\n        amount: BigNumber.from(1),\n        cap: BigNumber.from(100),\n        royaltyAttributes,\n        preMint: true,\n        nftContractAddress: sdk.nfts1155.nftContract.address,\n        providers: [config.neverminedNodeAddress],\n        price: assetPrice,\n      })\n\n      const response = await publishNFT1155({\n        nftAttributes,\n      })\n\n      setDDO(response as DDO)\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n\n  return (\n    <div className={b('container')}>\n      <SDKInstance />\n      <MMWallet />\n      {walletAddress && !ddo.id && (\n        <PublishAsset onPublish={onPublish} />\n      )}\n      {!isLoadingSDK && ddo?.id &&  (\n        <>\n          <SingleAsset ddo={ddo}/>\n          <BuyAsset ddo={ddo}/>\n        </>\n      )}\n      \n    </div>\n  )\n}\n\nexport default App\n")),(0,a.kt)("h3",{id:"complete-example-file"},"Complete example file"),(0,a.kt)("p",null,"Now let's put everything together."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import AssetRewards from '@nevermined-io/nevermined-sdk-js/dist/node/models/AssetRewards'\nimport React, { useEffect, useState } from 'react'\nimport { Catalog, AssetService, RoyaltyKind, BigNumber, getRoyaltyScheme, MetaData, DDO } from '@nevermined-io/catalog'\nimport { useWallet } from '@nevermined-io/providers'\nimport { UiText, UiLayout, BEM, UiButton } from '@nevermined-io/styles'\nimport styles from './example.module.scss'\nimport { appConfig } from './config'\n\nconst ERC_TOKEN = '0xe11a86849d99f524cac3e7a0ec1241828e332c62'\n\nconst b = BEM('example', styles)\n\nconst SDKInstance = () => {\n  const { sdk, isLoadingSDK } = Catalog.useNevermined()\n\n  return (\n    <>\n      <UiLayout>\n        <UiText className={b('detail')} variants={['bold']}>Is Loading SDK:</UiText>\n        <UiText>{isLoadingSDK ? 'Yes' : 'No'}</UiText>\n      </UiLayout>\n\n      <UiLayout>\n        <UiText variants={['bold']} className={b('detail')}>Is SDK Avaialable:</UiText>\n        <UiText>{sdk && Object.keys(sdk).length > 0 ? 'Yes' : 'No'}</UiText>\n      </UiLayout>\n    </>\n  )\n}\n\nconst SingleAsset = ({ddo}: {ddo: DDO}) => {\n\n  return (\n    <>\n      <UiLayout>\n        <UiText className={b('detail')} variants={['bold']}>Asset {ddo.id.slice(0, 10)}...:</UiText>\n      </UiLayout>\n      <UiText className={b('ddo')} variants={['detail']}>{JSON.stringify(ddo)}</UiText>\n    </>\n  )\n}\n\nconst PublishAsset = ({onPublish}: {onPublish: () => void}) => {\n  const { assets } = Catalog.useNevermined()\n\n  return (\n    <>\n      <UiButton onClick={onPublish} disabled={!Object.keys(assets).length}>\n        mint\n      </UiButton>\n    </>\n  )\n}\n\nconst BuyAsset = ({ddo}: {ddo: DDO}) => {\n  const { assets, account, isLoadingSDK, nfts, sdk } = Catalog.useNevermined()\n  const { walletAddress } = MetaMask.useWallet()\n  const [ownNFT1155, setOwnNFT1155] = useState(false)\n  const [isBought, setIsBought] = useState(false)\n  const [owner, setOwner] = useState('')\n  \n  useEffect(() => {\n    (async () => {\n      setOwnNFT1155(await account.isNFT1155Holder(ddo.id, walletAddress))\n      setOwner(await sdk.assets.owner(ddo.id))\n    })()\n  }, [walletAddress, isBought])\n\n  const buy = async () => {\n    const response = await nfts.access({\n      did: ddo.id,\n      nftHolder: owner,\n      nftAmount: BigNumber.from(1),\n      ercType: 1155\n    })\n    setIsBought(Boolean(response))\n  }\n\n  const download = async () => {\n    await assets.downloadNFT({\n      did: ddo.id\n    })\n  }\n\n  return (\n    <UiLayout className={b('buy')}>\n      {ownNFT1155 ? (\n        <UiButton onClick={download} disabled={isLoadingSDK}>\n          Download NFT\n        </UiButton>\n      ) : (\n        owner !== walletAddress ?\n        <UiButton onClick={buy} disabled={isLoadingSDK}>\n          buy\n        </UiButton>\n        : <span>The owner cannot buy, please change the account to buy the NFT asset</span>\n      )}\n    </UiLayout>\n  )\n}\n\nconst MMWallet = () => {\n  const { login, walletAddress, getConnectors } = useWallet()\n  return (\n    <UiLayout>\n      <UiText variants={['bold']} className={b('detail')}>Wallet address:</UiText>\n      <UiText>{walletAddress}</UiText>\n      {!walletAddress && <UiButton type='secondary' onClick={() => login(getConnectors()[0])}>Connect To MM</UiButton>}\n    </UiLayout>\n  )\n}\n\nconst App = () => {\n  const { isLoadingSDK, sdk } = Catalog.useNevermined()\n  const { publishNFT1155 } = AssetService.useAssetPublish()\n  const { walletAddress } = useWallet()\n  const [ddo, setDDO] = useState<DDO>({} as DDO)\n\n  const metadata: MetaData = {\n    main: {\n      name: '',\n      files: [{\n        index: 0,\n        contentType: 'application/json',\n        url: 'https://uploads5.wikiart.org/00268/images/william-holbrook-beard/the-bear-dance-1870.jpg'\n      }],\n      type: 'dataset',\n      author: '',\n      license: '',\n      dateCreated: new Date().toISOString(),\n    }\n  }\n\n  const onPublish = async () => {\n    try {\n      const assetPriceMap = new Map([\n        [walletAddress, BigNumber.from(1)]\n      ])\n  \n      const assetPrice = new AssetPrice(assetPriceMap)\n      const networkFee = await sdk.keeper.nvmConfig.getNetworkFee()\n      const feeReceiver = await sdk.keeper.nvmConfig.getFeeReceiver()\n\n      assetPrice.addNetworkFees(feeReceiver, BigNumber.from(networkFee))\n      assetPrice.setTokenAddress(ERC_TOKEN)\n\n      const royaltyAttributes = {\n        royaltyKind: RoyaltyKind.Standard,\n        scheme: getRoyaltyScheme(sdk, RoyaltyKind.Standard),\n        amount: 0,\n      }\n\n      const nftAttributes = NFTAttributes.getNFT1155Instance({\n        metadata,\n        serviceTypes: ['nft-sales', 'nft-access'],\n        amount: BigNumber.from(1),\n        cap: BigNumber.from(100),\n        royaltyAttributes,\n        preMint: true,\n        nftContractAddress: sdk.nfts1155.nftContract.address,\n        providers: [config.neverminedNodeAddress],\n        price: assetPrice,\n      })\n\n      const response = await publishNFT1155({\n        nftAttributes,\n      })\n\n      setDDO(response as DDO)\n    } catch (error) {\n      console.log('error', error)\n    }\n  }\n\n  return (\n    <div className={b('container')}>\n      <SDKInstance />\n      <MMWallet />\n      {walletAddress && !ddo.id && (\n        <PublishAsset onPublish={onPublish} />\n      )}\n      {!isLoadingSDK && ddo?.id &&  (\n        <>\n          <SingleAsset ddo={ddo}/>\n          <BuyAsset ddo={ddo}/>\n        </>\n      )}\n      \n    </div>\n  )\n}\n\nexport default App\n")),(0,a.kt)("h2",{id:"styling"},"Styling"),(0,a.kt)("p",null,"In the path ",(0,a.kt)("inlineCode",{parentName:"p"},"src/examples/example.module.scss")," you will find some styles to improve the UI of the app."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scss"},"@import '~@nevermined-io/styles/lib/cjs/styles/index.scss'\n\n.example {\n  @include component;\n\n  &__container {\n    padding: 25px 0 0 25px;\n  }\n\n  &__detail {\n    margin-right: 5px;\n  }\n\n  &__ddo {\n    line-height: 16px;\n  }\n\n  &__buy {\n    margin-top: 20px;\n  }\n}\n")),(0,a.kt)("h2",{id:"the-index-file"},"The index file"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"src/indes.tsx")," file call Catalog core, Catalog providers and the exemple component with the configurations set"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import '@nevermined-io/styles/lib/esm/styles/globals.scss'\nimport '@nevermined-io/styles/lib/esm/index.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Catalog, AssetService } from '@nevermined-io/catalog'\nimport { appConfig } from './config'\nimport App from 'examples'\nimport { WalletProvider, getClient } from '@nevermined-io/providers'\nimport ChainConfig from './chain_config'\n\n\nReactDOM.render(\n  <div>\n    <Catalog.NeverminedProvider config={appConfig} verbose={true}>\n      <AssetService.AssetPublishProvider>\n        <WalletProvider\n          client={Wagmi.createClient(\n            ConnectKit.getDefaultClient({\n              appName: 'My Nevermined App',\n              chains: ChainsConfig,\n              autoConnect: true\n            })\n          )}\n        >\n          <App/>\n        </WalletProvider>\n      </AssetService.AssetPublishProvider>\n    </Catalog.NeverminedProvider>\n  </div>,\n  document.getElementById('root') as HTMLElement\n)\n")),(0,a.kt)("h2",{id:"publish-and-buy-encrypted-assets-with-dtp-data-transfer-proof"},"Publish and buy encrypted assets with DTP (Data transfer proof)"),(0,a.kt)("p",null,"It is possible to encrypt assets and giving access by password using DTP, using ",(0,a.kt)("inlineCode",{parentName:"p"},"Catalog")," such approach is quite simple, for publish just is needed to set the crypto config and adding the password and the cripto config in the publish method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const nodeInfo = await sdk.services.node.getNeverminedNodeInfo()\nconst cryptoConfig = {\n    provider_key: nodeInfo['babyjub-public-key'],\n    provider_password: password,\n    provider_rsa_public: nodeInfo['rsa-public-key'],\n    provider_rsa_private: '',\n}\n\n...\n\nconst response = await publishNFT1155({\n  nftAttributes,\n  password,\n  cryptoConfig\n})\n")),(0,a.kt)("p",null,"And to access and download the asset only pass the password is needed:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const agreementId = await nfts.access({\n  did: ddo.id,\n  nftHolder: owner,\n  nftAmount: BigNumber.from(1),\n  ercType: 1155,\n  password,\n})\n\nconst result = await assets.downloadNFT({\n  did: ddo.id,\n  ercType: 1155,\n  password\n})\n")))}p.isMDXComponent=!0}}]);